{
	"info": {
		"_postman_id": "4d238e3e-aed5-46d6-819c-57796cb3b959",
		"name": "Alkemy-Challenge",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Register User",
					"item": [
						{
							"name": "Create User - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.have.property('username');\r",
											"    pm.expect(jsonData.data.username).to.be.an('string');\r",
											"    pm.expect(jsonData.data).to.have.property('email');\r",
											"    pm.expect(jsonData.data.email).to.be.an('string');\r",
											"    pm.expect(jsonData.data).to.have.property('password');\r",
											"    pm.expect(jsonData.data).to.have.property('id');\r",
											"    pm.expect(jsonData.data.id).to.be.an('number');\r",
											"    pm.expect(jsonData.data).to.have.property('name');\r",
											"    pm.expect(jsonData.data.name).to.be.an('string');   \r",
											"    pm.environment.set(\"userId\", jsonData.data.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"gonzalo{{randomNumber}}\",\r\n    \"password\": \"gonzalo\",\r\n    \"name\": \"gonzalo\",\r\n    \"email\": \"gonzalo{{randomNumber}}@hotmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/auth/register",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User - Failure Email exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"gonzalo{{randomNumber}}\",\r\n    \"password\": \"gonzalo\",\r\n    \"name\": \"gonzalo\",\r\n    \"email\": \"gonzalo@hotmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/auth/register",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User - Failure Username exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"gonzalo\",\r\n    \"password\": \"gonzalo\",\r\n    \"name\": \"gonzalo\",\r\n    \"email\": \"gonzalo{{randomNumber}}@hotmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/auth/register",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Login - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.not.have.status(00);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.have.property('token');\r",
											"    pm.expect(jsonData.data.token).to.be.an('string');\r",
											"    pm.expect(jsonData.data).to.have.property('user');\r",
											"\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", jsonData.data.token);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwYTY4YjM5OWIyMjA3MzIzMDU0NjRjMiIsImlhdCI6MTYyMTU1MDYyNSwiZXhwIjoxNjIxNjM3MDI1fQ.LYC7MZkVXjh7JUAG4Wk9WVV5ay4eDCnt0vlEIduxFug",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"gonzalo\",\r\n    \"password\": \"gonzalo\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/auth/login",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Failure Invalid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwYTY4YjM5OWIyMjA3MzIzMDU0NjRjMiIsImlhdCI6MTYyMTU1MDYyNSwiZXhwIjoxNjIxNjM3MDI1fQ.LYC7MZkVXjh7JUAG4Wk9WVV5ay4eDCnt0vlEIduxFug",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"pawdsd@hotmail.com\",\r\n    \"password\": \"199825036947\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/auth/login",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Failure Invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('data');\r",
											"    pm.expect(jsonData.error.data).to.be.an('array');\r",
											"    pm.expect(jsonData.error.data).to.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwYTY4YjM5OWIyMjA3MzIzMDU0NjRjMiIsImlhdCI6MTYyMTU1MDYyNSwiZXhwIjoxNjIxNjM3MDI1fQ.LYC7MZkVXjh7JUAG4Wk9WVV5ay4eDCnt0vlEIduxFug",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"199825036947\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/auth/login",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create User",
					"item": [
						{
							"name": "Create User - Failure Email exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"gonzalo{{randomNumber}}\",\r\n    \"password\": \"gonzalo\",\r\n    \"name\": \"gonzalo\",\r\n    \"email\": \"gonzalo@hotmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User - Failure Username exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"gonzalo\",\r\n    \"password\": \"gonzalo\",\r\n    \"name\": \"gonzalo\",\r\n    \"email\": \"gonzalo{{randomNumber}}@hotmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.have.property('username');\r",
											"    pm.expect(jsonData.data.username).to.be.an('string');\r",
											"    pm.expect(jsonData.data).to.have.property('email');\r",
											"    pm.expect(jsonData.data.email).to.be.an('string');\r",
											"    pm.expect(jsonData.data).to.have.property('password');\r",
											"    pm.expect(jsonData.data).to.have.property('id');\r",
											"    pm.expect(jsonData.data.id).to.be.an('number');\r",
											"    pm.expect(jsonData.data).to.have.property('name');\r",
											"    pm.expect(jsonData.data.name).to.be.an('string');   \r",
											"    pm.environment.set(\"userId\", jsonData.data.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"gonzalo{{randomNumber}}\",\r\n    \"password\": \"gonzalo\",\r\n    \"name\": \"gonzalo\",\r\n    \"email\": \"gonzalo{{randomNumber}}@hotmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Users",
					"item": [
						{
							"name": "Get All - Complete filters - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.not.have.status(00);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/users?name=Gonzalo",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "name",
											"value": "Gonzalo"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Failure Without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{basepath}}/users?filter[name]=gonzalo",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "gonzalo"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Failure Invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}1233",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/users?filter[name]=gonzalo",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "gonzalo"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Failure invalid filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('data');\r",
											"    pm.expect(jsonData.error.data).to.be.an('array');\r",
											"    pm.expect(jsonData.error).to.have.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/users?filter[name]=Gonzalo&filter[lastName]=Aban",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "Gonzalo"
										},
										{
											"key": "filter[lastName]",
											"value": "Aban"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User byId - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.be.an('object');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"roberto\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users",
										":id"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User byId - Failure Invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('data');\r",
											"    pm.expect(jsonData.error.data).to.be.an('array');\r",
											"    pm.expect(jsonData.error).to.have.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"roberto\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users",
										":id"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "608dcd640a57251a88e5ff51"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update User",
					"item": [
						{
							"name": "Update User - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.get(\"userId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Gonzalo\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User - Failure ID invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('data');\r",
											"    pm.expect(jsonData.error.data).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Gonzalo\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "123123"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete User",
					"item": [
						{
							"name": "Delete User- Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User - Failure ID invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 6000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "123123"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Movies",
			"item": [
				{
					"name": "Create Movie",
					"item": [
						{
							"name": "Create Movie - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.have.property('title');\r",
											"    pm.expect(jsonData.data.title).to.be.an('string')\r",
											"    pm.expect(jsonData.data).to.have.property('id');\r",
											"    pm.expect(jsonData.data.id).to.be.an('number');\r",
											"    pm.expect(jsonData.data).to.have.property('creationDate');\r",
											"    pm.expect(jsonData.data.creationDate).to.be.an('string');\r",
											"    pm.expect(jsonData.data).to.have.property('calification');\r",
											"    pm.expect(jsonData.data.calification).to.be.an('number');\r",
											"    pm.expect(jsonData.data).to.have.property('updatedAt');\r",
											"    pm.expect(jsonData.data.updatedAt).to.be.an('string');\r",
											"    pm.expect(jsonData.data).to.have.property('createdAt');\r",
											"    pm.expect(jsonData.data.createdAt).to.be.an('string');   \r",
											"    pm.environment.set(\"movieId\", jsonData.data.id);\r",
											"    pm.environment.set(\"movieTitle\", jsonData.data.title);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Toy Story 2{{randomNumber}}\",\r\n    \"creationDate\": \"2019/09/23\",\r\n    \"calification\": 10.0,\r\n    \"typeMovie\": \"MOVIE\",\r\n    \"genders\": [\"ANIMATION\", \"ADVENTURE\", \"COMEDY\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Movie - Failure Title exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{movieTitle}}\",\r\n    \"creationDate\": \"2019/09/23\",\r\n    \"calification\": 10.0,\r\n    \"typeMovie\": \"MOVIE\",\r\n    \"genders\": [\"ANIMATION\", \"ADVENTURE\", \"COMEDY\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Movie - Failure Gender not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{movieTitle}}\",\r\n    \"creationDate\": \"2019/09/23\",\r\n    \"calification\": 10.0,\r\n    \"typeMovie\": \"MOVIE\",\r\n    \"genders\": [\"ANIMATION\", \"ADVENTURE\", \"COME\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Upload Image",
					"item": [
						{
							"name": "Upload Image - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/COMPAQ-P21/Downloads/Toy_Story_2_poster.jpg"
										},
										{
											"key": "id",
											"value": "{{movieId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{basepath}}/movies/image",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload Image - Failure type file not supported",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/COMPAQ-P21/Downloads/Parte2Grupo14.pdf"
										},
										{
											"key": "id",
											"value": "{{movieId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{basepath}}/movies/image",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload Image - Failure Invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/COMPAQ-P21/Downloads/Toy_Story_2_poster.jpg"
										},
										{
											"key": "id",
											"value": "1321323",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{basepath}}/movies/image",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload Image - Failure Invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}awds",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/COMPAQ-P21/Downloads/Woody.png"
										},
										{
											"key": "id",
											"value": "{{movieId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{basepath}}/movies/image",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										"image"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Movie",
					"item": [
						{
							"name": "Get All - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.not.have.status(00);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/movies?title=P&gender=1&order=DESC",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies"
									],
									"query": [
										{
											"key": "title",
											"value": "P"
										},
										{
											"key": "gender",
											"value": "1"
										},
										{
											"key": "order",
											"value": "DESC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Failure Without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{basepath}}/movies",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Failure Invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}1233",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/movies",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Failure invalid filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('data');\r",
											"    pm.expect(jsonData.error.data).to.be.an('array');\r",
											"    pm.expect(jsonData.error).to.have.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/movies?name=Spider Man",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies"
									],
									"query": [
										{
											"key": "name",
											"value": "Spider Man"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Movie byId - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.be.an('object');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":id"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{movieId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Movie byId - Failure Invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('data');\r",
											"    pm.expect(jsonData.error.data).to.be.an('array');\r",
											"    pm.expect(jsonData.error).to.have.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"roberto\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":id"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "608dcd640a57251a88e5ff51"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Movie",
					"item": [
						{
							"name": "Update Movie - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Title\": \"Shrek {{randomNumber}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{movieId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Movie - Failure ID invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 6000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('data');\r",
											"    pm.expect(jsonData.error.data).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"shrek {{randomNumber}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "123123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Image - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/COMPAQ-P21/Downloads/Toy_Story_2_poster.jpg"
										},
										{
											"key": "id",
											"value": "{{characterId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{basepath}}/movies/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{movieId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Movie",
					"item": [
						{
							"name": "Delete Movie- Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{movieId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Movie - Failure ID invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 6000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "123123"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Association with Character",
					"item": [
						{
							"name": "Associate Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.equals('OK')\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/movies/:idMovie/character/:idCharacter",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":idMovie",
										"character",
										":idCharacter"
									],
									"variable": [
										{
											"key": "idMovie",
											"value": "12"
										},
										{
											"key": "idCharacter",
											"value": "46"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Succes - Failure IdMovie no exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('data');\r",
											"    pm.expect(jsonData.error.data).to.be.an('array');\r",
											"    pm.expect(jsonData.error).to.have.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/movies/:idMovie/character/:idCharacter",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":idMovie",
										"character",
										":idCharacter"
									],
									"variable": [
										{
											"key": "idMovie",
											"value": "122a"
										},
										{
											"key": "idCharacter",
											"value": "46"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Succes - Failure IdCharacter no exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('data');\r",
											"    pm.expect(jsonData.error.data).to.be.an('array');\r",
											"    pm.expect(jsonData.error).to.have.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/movies/:idMovie/character/:idCharacter",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":idMovie",
										"character",
										":idCharacter"
									],
									"variable": [
										{
											"key": "idMovie",
											"value": "12"
										},
										{
											"key": "idCharacter",
											"value": "464d"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Succes - Failure Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}adsd",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/movies/:idMovie/character/:idCharacter",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":idMovie",
										"character",
										":idCharacter"
									],
									"variable": [
										{
											"key": "idMovie",
											"value": "12"
										},
										{
											"key": "idCharacter",
											"value": "46"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Character",
			"item": [
				{
					"name": "Create Character",
					"item": [
						{
							"name": "Create Character - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.have.property('name');\r",
											"    pm.expect(jsonData.data.name).to.be.an('string');\r",
											"    pm.expect(jsonData.data).to.have.property('id');\r",
											"    pm.expect(jsonData.data.id).to.be.an('number');\r",
											"    pm.expect(jsonData.data).to.have.property('age');\r",
											"    pm.expect(jsonData.data.age).to.be.an('number');\r",
											"    pm.expect(jsonData.data).to.have.property('weight');\r",
											"    pm.expect(jsonData.data.weight).to.be.an('number');\r",
											"    pm.expect(jsonData.data).to.have.property('history');\r",
											"    pm.expect(jsonData.data.history).to.be.an('string');\r",
											"    pm.expect(jsonData.data).to.have.property('updatedAt');\r",
											"    pm.expect(jsonData.data.updatedAt).to.be.an('string');\r",
											"    pm.expect(jsonData.data).to.have.property('createdAt');\r",
											"    pm.expect(jsonData.data.createdAt).to.be.an('string');   \r",
											"    pm.environment.set(\"characterId\", jsonData.data.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Woody{{randomNumber}}\",\r\n    \"age\": 30,\r\n    \"weight\": 0.3,\r\n    \"history\": \"El comisario madafaking woody aka archienemigo del malvado cara de papa...\",\r\n    \"movies\": [\"Toy Story\", \"Toy Story 20.12312519203080696\", \"Toy Story 20.2273527446686292\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Character - Failure Name exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Capitan America\",\r\n    \"age\": {{randomNumber}},\r\n    \"weight\": 90.0,\r\n    \"history\": \"El capitan madafaking roger aka archienemigo del doctor ferman...\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Character - Failure Movie not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Capitan America{{randomNumber}}\",\r\n    \"age\": 90,\r\n    \"weight\": 90.0,\r\n    \"history\": \"El capitan madafaking roger aka archienemigo del doctor ferman...\",\r\n    \"movies\": [\"El zorro\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Upload Image",
					"item": [
						{
							"name": "Upload Image - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/COMPAQ-P21/Downloads/002dfc90f872de4cce739a3ff979956c.jpg"
										},
										{
											"key": "id",
											"value": "{{characterId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{basepath}}/characters/image",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload Image - Failure Invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/COMPAQ-P21/Downloads/Woody.png"
										},
										{
											"key": "id",
											"value": "1321323",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{basepath}}/characters/image",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload Image - Failure type file not supported",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/COMPAQ-P21/Downloads/Parte2Grupo14.pdf"
										},
										{
											"key": "id",
											"value": "{{characterId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{basepath}}/characters/image",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload Image - Failure Invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}awds",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/COMPAQ-P21/Downloads/Woody.png"
										},
										{
											"key": "id",
											"value": "{{characterId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{basepath}}/characters/image",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										"image"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Character",
					"item": [
						{
							"name": "Get All - Complete filters - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.not.have.status(00);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/characters?name=e&age=30&weight=0.3&movies=12",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters"
									],
									"query": [
										{
											"key": "name",
											"value": "e"
										},
										{
											"key": "age",
											"value": "30"
										},
										{
											"key": "weight",
											"value": "0.3"
										},
										{
											"key": "movies",
											"value": "12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Failure Without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{basepath}}/characters?filter[name]=Spider Man",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "Spider Man"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Failure Invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}1233",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/characters?filter[name]=Spider Man",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "Spider Man"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Failure invalid filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('data');\r",
											"    pm.expect(jsonData.error.data).to.be.an('array');\r",
											"    pm.expect(jsonData.error).to.have.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/characters?lastname=Wattson",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters"
									],
									"query": [
										{
											"key": "lastname",
											"value": "Wattson"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character byId - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.be.an('object');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{characterId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character byId - Failure Invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('data');\r",
											"    pm.expect(jsonData.error.data).to.be.an('array');\r",
											"    pm.expect(jsonData.error).to.have.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"roberto\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "608dcd640a57251a88e5ff51"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Character",
					"item": [
						{
							"name": "Update Character - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Gonzalo{{randomNumber}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{characterId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Image - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/COMPAQ-P21/Downloads/002dfc90f872de4cce739a3ff979956c.jpg"
										},
										{
											"key": "id",
											"value": "{{characterId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{characterId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Character - Failure ID invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 6000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('data');\r",
											"    pm.expect(jsonData.error.data).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Gonzalo\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "123123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Character - Failure ID invalid Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 6000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('data');\r",
											"    pm.expect(jsonData.error.data).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Gonzalo\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "123123"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Character",
					"item": [
						{
							"name": "Delete Character- Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{characterId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Character - Failure ID invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 6000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "123123"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Association with Movie",
					"item": [
						{
							"name": "Associate Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.equals('OK')\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/characters/:idCharacter/movie/:idMovie",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":idCharacter",
										"movie",
										":idMovie"
									],
									"variable": [
										{
											"key": "idCharacter",
											"value": "46"
										},
										{
											"key": "idMovie",
											"value": "12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Succes - Failure IdMovie no exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('data');\r",
											"    pm.expect(jsonData.error.data).to.be.an('array');\r",
											"    pm.expect(jsonData.error).to.have.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/characters/:idCharacter/movie/:idMovie",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":idCharacter",
										"movie",
										":idMovie"
									],
									"variable": [
										{
											"key": "idCharacter",
											"value": "46"
										},
										{
											"key": "idMovie",
											"value": "12awds"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Succes - Failure IdCharacter no exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('data');\r",
											"    pm.expect(jsonData.error.data).to.be.an('array');\r",
											"    pm.expect(jsonData.error).to.have.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/characters/:idCharacter/movie/:idMovie",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":idCharacter",
										"movie",
										":idMovie"
									],
									"variable": [
										{
											"key": "idCharacter",
											"value": "aadws"
										},
										{
											"key": "idMovie",
											"value": "12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Associate Succes - Failure Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}adsd",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/characters/:idCharacter/movie/:idMovie",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":idCharacter",
										"movie",
										":idMovie"
									],
									"variable": [
										{
											"key": "idCharacter",
											"value": "46"
										},
										{
											"key": "idMovie",
											"value": "12"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Gender",
			"item": [
				{
					"name": "Create Gender",
					"item": [
						{
							"name": "Create Gender - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.have.property('name');\r",
											"    pm.expect(jsonData.data.name).to.be.an('string');\r",
											"    pm.expect(jsonData.data).to.have.property('id');\r",
											"    pm.expect(jsonData.data.id).to.be.an('number');\r",
											"    pm.expect(jsonData.data).to.have.property('updatedAt');\r",
											"    pm.expect(jsonData.data.updatedAt).to.be.an('string');\r",
											"    pm.expect(jsonData.data).to.have.property('createdAt');\r",
											"    pm.expect(jsonData.data.createdAt).to.be.an('string');   \r",
											"    pm.environment.set(\"genderId\", jsonData.data.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"FUTURE_FICTION{{randomNumber}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/genders",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"genders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Gender - Failure Name exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ACTION\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/genders",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"genders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Upload Image",
					"item": [
						{
							"name": "Upload Image - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/COMPAQ-P21/Downloads/Toy Story 3.jpg"
										},
										{
											"key": "id",
											"value": "{{genderId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{basepath}}/genders/image",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"genders",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload Image - Failure Invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}awds",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/COMPAQ-P21/Downloads/Woody.png"
										},
										{
											"key": "id",
											"value": "{{genderId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{basepath}}/genders/image",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"genders",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload Image - Failure type file not supported",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/COMPAQ-P21/Downloads/Parte2Grupo14.pdf"
										},
										{
											"key": "id",
											"value": "{{genderId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{basepath}}/genders/image",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"genders",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload Image - Failure Invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/COMPAQ-P21/Downloads/Woody.png"
										},
										{
											"key": "id",
											"value": "1321323",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{basepath}}/genders/image",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"genders",
										"image"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Gender",
					"item": [
						{
							"name": "Get All - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.not.have.status(00);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/genders?",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"genders"
									],
									"query": [
										{
											"key": "",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Failure Without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{basepath}}/genders",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"genders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Failure Invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}1233",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/genders",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"genders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Gender byId - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.be.an('object');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/genders/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"genders",
										":id"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{genderId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Character byId - Failure Invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('data');\r",
											"    pm.expect(jsonData.error.data).to.be.an('array');\r",
											"    pm.expect(jsonData.error).to.have.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"roberto\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/genders/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"genders",
										":id"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "608dcd640a57251a88e5ff51"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Gender",
					"item": [
						{
							"name": "Update Gender - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ACTION{{randomNumber}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/genders/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"genders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{genderId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Image - Succes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/COMPAQ-P21/Downloads/002dfc90f872de4cce739a3ff979956c.jpg"
										},
										{
											"key": "id",
											"value": "{{characterId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{basepath}}/genders/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"genders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{genderId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Gender - Failure ID invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 6000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('data');\r",
											"    pm.expect(jsonData.error.data).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Gonzalo\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/genders/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"genders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "123123"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Gender",
					"item": [
						{
							"name": "Delete Gender- Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code is not 400\", function () {\r",
											"    pm.response.to.not.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.be.an('string');\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/genders/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"genders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{genderId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Gender - Failure ID invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 6000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is a json\"), function() {\r",
											"    pm.response.to.be.json;\r",
											"}\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('code');\r",
											"    pm.expect(jsonData.error.code).to.be.an('number');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/genders/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"genders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "123123"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "randomNumber",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		}
	]
}